
Com visualitzar l'arbre que genera el parser.
---------------------------------------------

Per visualitzar l'arbre hem de generar la versio Java del parser:

# definir comandes i classpaths 
# (sols cal un cop per sessio. Es pot posar al .tcshrc)
$> source /assig/cl/tcshrc.CL-GRAU.antlr4

# Compilar la gramatica de la practica amb la versio Java de antlr4
$> cd practica/asl
$> antlr4 Asl.g4
$> javac *java

# Executar l'eina grun per visualitzar l'arbre
grun Asl program -tree ../examples/jpbasic_chkt_01.asl
grun Asl program -gui ../examples/jpbasic_chkt_01.asl

---------------------------------------------

compilar:

En Makefile: 
- descomentar la linia 80+:  ANTLR_ROOT := /usr

1.  make antlr
2.  make 

3. antlr4 Expr.g4 
4. javac *java 
5a. grun Expr e -gui expr1.txt 
5b. grun Expr e -tree expr1.txt


emacs

193
17
25

----------------------------------------------
fragment 
DIGIT: '0'..'9'             // no es un token, no queremos reconocer '0' como un token 
INT_VAL: (DIGIT)+;

ctx->expre()   // es un vector 
etx->expr().size();

stmt: 
    ID '=' expr NEWLINE
    IF expr THEN stmt ENDIF

----------------------------------------------------
///////////////////////////////////////////////////
///////////////////  PRACTICA  ///////////////////
/////////////////////////////////////////////////

compilar: 
./asl ../examples/jpbasic_chkt_01.asl

TERROR -> tipus que no se

COMANDOS AUXILIALES: 
cat -n ../examples/jp_chkt_01.asl


MANUAL y DEFINICION: https://www.cs.upc.edu/~cl/practica/modules.html


-------------------------------------------------------

Asl.g: genera AslLexer y AslParser(parse tree)

main: tiene las siguientes funcionaridades: 
    * Usage: correct use of program 
    * read input file
    * 

AslVisitor: tiene un "visit" method para cada regla de la gramatica.
AslBaseVisitor: implementa estos metodos.
(TypeCheckVisitor, SymbolsVisitor, CodeGenVisitor) son derivados de AslBaseVisitor

TypeCheckVisitor: will declare visit methods for nodes related to expressions,
 assignments, and parameter passing,
 but ignore nodes about variable or function declarations.

SymbolsVisitor: will only declare visit methods for nodes related to variable,
 parameter, or function declarations, and ignore all the rest.

CodeGenVisitor: will declare visit methods for nodes related to instructions and expressions,
 but ignore others.

-------------------------------------------------------

-------------------------------------------------------
./asl /test/joc1.txt 

./asl ../examples/jpbasic_genc_01.asl > tvm1.t

chmod +x tvm-linux 
./tvm-linux ../asl/tvm1.t


//
./asl ../examples/jp_genc_07.asl > code.t
../tvm/tvm code.t < ../examples/jp_genc_07.in

  DEBUG_ENTER();
  instructionList code;
  instructionList ppush;
  instructionList ppop;
  std::vector<TypesMgr::TypeId> ptypes = Types.getFuncParamsTypes(getTypeDecor(ctx->ident()));

  for (uint i = 0; i< ctx->expr().size(); ++i){
    CodeAttribs     && codAtsE = visit(ctx->expr(i));
    std::string          addr1 = codAtsE.addr;
    instructionList &    code1 = codAtsE.code;
  
    code = code || code1; // param

    // check param type 
    TypesMgr::TypeId tParam = getTypeDecor(ctx->expr(i));  // param type
    TypesMgr::TypeId tFuncParam = ptypes[i];      // func param type
    if (Types.isIntegerTy(tParam) and Types.isFloatTy(tFuncParam)) {
      std::string temp = "%"+codeCounters.newTEMP();
      code = code || instruction::FLOAT(temp, addr1);
      ppush = ppush || instruction::PUSH(temp);       // push transform (int->float)
    }
    else {
      ppush = ppush || instruction::PUSH(addr1); 
      ppop = ppop || instruction::POP();
    }
  }
  code = code || instruction::PUSH() || ppush;
  std::string name = ctx->ident()->getText();
  code = code || instruction::CALL(name);

  std::string temp = "%"+codeCounters.newTEMP();  // get the return value
  code = code || ppop || instruction::POP(temp);
    
  CodeAttribs codAts(temp, "", code);
  DEBUG_EXIT();
  return codAts; //ret tooda